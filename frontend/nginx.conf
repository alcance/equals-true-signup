server {
    listen 80;
    server_name localhost 3.16.159.186; # Ensure your actual public IP is here

    root /usr/share/nginx/html; # Path to your static frontend files, if any
    index index.html;

    # Basic CORS headers for all responses. Consider moving these to specific
    # locations or handling fully in the backend for more granular control.
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;

    location / {
        # This block serves a static frontend application if you have one.
        # If not, you might redirect to API docs or a simple landing page.
        try_files $uri $uri/ /index.html;

        # Handle preflight (OPTIONS) requests for CORS
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            add_header 'Access-Control-Max-Age' 1728000; # Cache preflight for 20 days
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204; # No content for successful preflight
        }
    }

    # Proxy API requests to your Node.js application
    location /api/ {
        proxy_pass http://localhost:3001/api/; # Your Node.js app's port
        proxy_http_version 1.1; # Recommended for persistent connections

        # Preserve original host and client IP information
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme; # Tells backend if original request was http/https

        # Add CORS headers specifically for API responses (can be omitted if handled by backend's `cors` middleware)
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
    }

    # Health check endpoint
    location /health {
        access_log off; # Don't log health checks
        return 200 "healthy\n"; # Simple OK response
        add_header Content-Type text/plain;
    }

    # Error pages (optional, for custom error handling by Nginx)
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html; # Path to your custom error pages
    }
}
